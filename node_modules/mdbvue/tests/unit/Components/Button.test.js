import { mount, shallowMount } from '@vue/test-utils'
import mdbBtn from '@/components/Components/Button.vue'

describe('Component', () => {
  test('is a Vue instance', () => {
    const wrapper = shallowMount(mdbBtn)
    expect(wrapper.isVueInstance()).toBeTruthy()
  })

  test('is slot correct', () => {
    const wrapper = shallowMount(mdbBtn, {
      slots: {
        default: 'Test'
      }
    })
    expect(wrapper.text()).toBe('Test')
  })

  test('is click event emitted', () => {
    const wrapper = shallowMount(mdbBtn)
    wrapper.trigger('click')
    expect(wrapper.emitted().click).toBeTruthy()
  })

  test('is tag <button> rendered with type "button"', () => {
    const wrapper = shallowMount(mdbBtn, {
      attrs: {
        type: 'button'
      }
    })
    expect(wrapper.is('button')).toBe(true)
    expect(wrapper.attributes('type')).toBe('button')
  })

  test('is tag <button> rendered with type "submit"', () => {
    const wrapper = shallowMount(mdbBtn, {
      attrs: {
        type: 'submit'
      }
    })
    expect(wrapper.is('button')).toBe(true)
    expect(wrapper.attributes('type')).toBe('submit')
  })

  test('is <a href> when tag prop and href attr is given', () => {
    const wrapper = shallowMount(mdbBtn, {
      propsData: {
        tag: 'a'
      },
      attrs: {
        href: 'https://mdbootstrap.com/'
      }
    })
    expect(wrapper.is('a')).toBe(true)
    expect(wrapper.attributes('href')).toBe('https://mdbootstrap.com/')
  })

  test('is icon rendered when prop "icon" given', () => {
    const wrapper = mount(mdbBtn, {
      propsData: {
        icon: 'dog'
      }
    })
    expect(wrapper.contains('i')).toBe(true)
    expect(wrapper.find('i').classes()).toContain('fas')
    expect(wrapper.find('i').classes()).toContain('fa-dog')
  })

  test('is wave disabled with no action and enabled after click', () => {
    const wrapper = shallowMount(mdbBtn)
    expect(wrapper.contains('div.ripple')).toBe(false)
    wrapper.trigger('click')
    expect(wrapper.contains('div.ripple')).toBe(true)
  })

})