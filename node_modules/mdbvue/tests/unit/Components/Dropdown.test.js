import { mount, shallowMount } from '@vue/test-utils'
import { mdbDropdown } from '@/components/Components/Dropdown.vue'
import { mdbDropdownToggle } from '@/components/Components/DropdownToggle.vue'
import { mdbDropdownMenu } from '@/components/Components/DropdownMenu.vue'
import { mdbDropdownItem } from '@/components/Components/DropdownItem.vue'
import VueRouter from 'vue-router'
import Vue from 'vue'

describe('Component', () => {
  test('is a Vue instance', () => {
    const wrapper = shallowMount(mdbDropdown)
    expect(wrapper.isVueInstance()).toBeTruthy()
  })

  test('are tag & classes correct', () => {
    const wrapper = shallowMount(mdbDropdown, {
      propsData: {
        tag: 'p',
      }
    })
    expect(wrapper.is('p')).toBe(true)
    expect(wrapper.classes()).toContain('dropdown') 
  })

  test('are children components rendered & emit events (before, after click & after close)', () => {
    const wrapper = mount(mdbDropdown, {
      slots: {
        toggle: mdbDropdownToggle,
        default: [mdbDropdownMenu, mdbDropdownItem]
      }
    })
    expect(wrapper.contains('button.dropdown-toggle')).toBe(true)
    expect(wrapper.contains('div.dropdown-menu')).not.toBe(true)
    expect(wrapper.contains('a.dropdown-item')).not.toBe(true)
    wrapper.find('span').trigger('click')
    expect(wrapper.contains('div.dropdown-menu')).toBe(true)
    expect(wrapper.contains('a.dropdown-item')).toBe(true)

    wrapper.find('a.dropdown-item').trigger('click')
    expect(wrapper.find('a.dropdown-item').emitted().click).toBeTruthy()

    wrapper.find('span').trigger('click')
    expect(wrapper.contains('div.dropdown-menu')).not.toBe(true)
    expect(wrapper.contains('a.dropdown-item')).not.toBe(true)
  })

  test('is dropdown item rendered as router-link with proper classes', () => {
    Vue.use(VueRouter)
    const wrapper = shallowMount(mdbDropdownItem, {
      propsData: {
        to: '/test',
        disabled: true,
        active: true,
        submenu: true
      }
    })
    expect(wrapper.attributes('to')).toBe('/test')
    expect(wrapper.classes()).toContain('disabled')
    expect(wrapper.classes()).toContain('active')
    expect(wrapper.classes()).toContain('dropdown-submenu')
  })

  test('is dropdown item emitting click event', () => {
    const wrapper = shallowMount(mdbDropdownItem)
    wrapper.trigger('click')
    expect(wrapper.emitted().click).toBeTruthy()
  })
})