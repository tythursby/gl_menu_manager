import { shallowMount } from '@vue/test-utils'
import { mdbPagination } from '@/components/Components/Pagination.vue'
import { mdbPageItem } from '@/components/Components/PageItem.vue'
import { mdbPageNav } from '@/components/Components/PageNav.vue'

describe('Component', () => {
  test('is a Vue instance', () => {
    const wrapper = shallowMount(mdbPagination)
    expect(wrapper.isVueInstance()).toBeTruthy()
  })

  test('is slot correct', () => {
    const wrapper = shallowMount(mdbPagination, {
      slots: {
        default: 'Test'
      }
    })
    expect(wrapper.text()).toBe('Test')
  })

  test('are tag, classes & children correct', () => {
    const wrapper = shallowMount(mdbPagination, {
      propsData: {
        tag: 'ul'
      },
      slots: {
        default: [mdbPageItem]
      }
    })
    expect(wrapper.is('ul')).toBe(true)
    expect(wrapper.classes()).toContain('pagination')
    expect(wrapper.contains('.page-link')).toBe(true)
  })

  test('are children correct', () => {
    const wrapper = shallowMount(mdbPagination, {
      slots: {
        default: [mdbPageNav]
      }
    })
    expect(wrapper.classes()).toContain('pagination')
    expect(wrapper.contains('.page-item')).toBe(true)
  })

  test('is page nav content correct', () => {
    const wrapper = shallowMount(mdbPageNav, {
      propsData: {
        prev: true
      }
    })
    expect(wrapper.find('span.sr-only').text()).toBe('Previous')
  })

  test('is page nav content correct', () => {
    const wrapper = shallowMount(mdbPageNav, {
      propsData: {
        next: true
      }
    })
    expect(wrapper.find('span.sr-only').text()).toBe('Next')
  })
})